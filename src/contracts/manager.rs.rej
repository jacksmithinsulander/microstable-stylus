@@ -67,18 +71,19 @@
                 } else {
                     match self.sh_usd.mint(sender, amount) {
                         Ok(_) => return Ok(()),
-                        Err(e) => return Err(e.into())
+                        Err(e) => return Err(e.into()),
                     }
                 }
-            },
-            Err(e) => return Err(e)
+            }
+            Err(e) => return Err(e),
         }
     }
 
     pub fn withdraw(&mut self, amount: U256) -> Result<(), Vec<u8>> {
         let sender = self.vm().msg_sender();
         let previous_balance = self.address_2deposit.get(sender);
-        self.address_2minted.insert(sender, previous_balance - amount);
+        self.address_2minted
+            .insert(sender, previous_balance - amount);
         match self.collat_ratio(sender) {
             Ok(result) => {
                 if result < U256::from(MIN_COLLAT_RATIO) {
@@ -88,8 +93,8 @@
                     let _ = weth_instance.transfer(self, sender, amount);
                     Ok(())
                 }
-            },
-            Err(e) => return Err(e)
+            }
+            Err(e) => return Err(e),
         }
     }
 
@@ -108,12 +116,12 @@
                             self.address_2deposit.insert(user, U256::ZERO);
                             self.address_2minted.insert(user, U256::ZERO);
                             Ok(())
-                        },
-                        Err(e) => return Err(e.into())
+                        }
+                        Err(e) => return Err(e.into()),
                     }
                 }
-            },
-            Err(e) => return Err(e)
+            }
+            Err(e) => return Err(e),
         }
     }
 
