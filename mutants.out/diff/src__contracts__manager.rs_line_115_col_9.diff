--- src/contracts/manager.rs
+++ replace Manager::withdraw -> Result<(), Vec<u8>> with Ok(())
@@ -107,31 +107,17 @@
                     ////Ok(())
                 //}
             },
             Err(e) => return Err(e) 
         }
     }
 
     pub fn withdraw(&mut self, amount: U256) -> Result<(), Vec<u8>> {
-        let sender = self.vm().msg_sender();
-        let previous_balance = self.address_2deposit.get(sender);
-        self.address_2minted.insert(sender, previous_balance - amount);
-        match self.collat_ratio(sender) {
-            Ok(result) => {
-                if result < U256::from(MIN_COLLAT_RATIO) {
-                    return Err(b"Undercollateralized".to_vec());
-                } else {
-                    let weth_instance = IErc20::new(self.weth.get());
-                    let _ = weth_instance.transfer(self, sender, amount);
-                    Ok(())
-                }
-            },
-            Err(e) => return Err(e) 
-        }
+        Ok(()) /* ~ changed by cargo-mutants ~ */
     }
 
     pub fn liquidate(&mut self, user: Address) -> Result<(), Vec<u8>> {
         match self.collat_ratio(user) {
             Ok(result) => {
                 if result > U256::from(MIN_COLLAT_RATIO) {
                     return Err(b"Not Undercollateralized".to_vec());
                 } else {
