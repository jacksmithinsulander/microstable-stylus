--- src/contracts/manager.rs
+++ replace Manager::mint -> Result<(), Vec<u8>> with Ok(())
@@ -79,41 +79,17 @@
         match sh_usd_instance.burn(self, sender, amount) {
             Ok(_) => Ok(()),
             Err(e) => Err(e.into()),
         }
 
     }
 
     pub fn mint(&mut self, amount: U256) -> Result<(), Vec<u8>> {
-        let sender = self.vm().msg_sender();
-        let previous_balance = self.address_2minted.get(sender);
-        self.address_2minted.insert(sender, previous_balance + amount);
-        match self.collat_ratio(sender) {
-            Ok(result) => {
-                Ok(())
-                //if result < U256::from(MIN_COLLAT_RATIO) {
-                    //return Err(b"Undercollateralized".to_vec());
-                //} else {
-                    //let sh_usd_instance = IErc20::new(self.sh_usd.get());
-                    //match sh_usd_instance.mint(self ,sender, amount) {
-                        //Ok(_) => return Ok(()),
-                        //Err(e) => return Err(e.into())
-                    //}
-                    ////unsafe { 
-                        ////&RawCall::new().call(self.sh_usd.get(), &mintCall {
-                            ////from: sender,
-                            ////amount: amount,
-                        ////}.abi_encode())
-                    ////};
-                    ////Ok(())
-                //}
-            },
-            Err(e) => return Err(e) 
-        }
+        Ok(()) /* ~ changed by cargo-mutants ~ */
     }
 
     pub fn withdraw(&mut self, amount: U256) -> Result<(), Vec<u8>> {
         let sender = self.vm().msg_sender();
         let previous_balance = self.address_2deposit.get(sender);
         self.address_2minted.insert(sender, previous_balance - amount);
         match self.collat_ratio(sender) {
             Ok(result) => {
