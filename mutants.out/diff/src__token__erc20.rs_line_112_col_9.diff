--- src/token/erc20.rs
+++ replace Erc20<T>::burn -> Result<(), Erc20Error> with Ok(())
@@ -104,38 +104,17 @@
         });
 
         Ok(())
     }
 
     /// Burns `value` tokens from `address`
     pub fn burn(&mut self, address: Address, value: U256) -> Result<(), Erc20Error> {
         // Decreasing balance
-        let mut balance = self.balances.setter(address);
-        let old_balance = balance.get();
-        if old_balance < value {
-            return Err(Erc20Error::InsufficientBalance(InsufficientBalance {
-                from: address,
-                have: old_balance,
-                want: value,
-            }));
-        }
-        balance.set(old_balance - value);
-
-        // Decreasing the total supply
-        self.total_supply.set(self.total_supply.get() - value);
-
-        // Emitting the transfer event
-        log(self.vm(),Transfer {
-            from: address,
-            to: Address::ZERO,
-            value,
-        });
-
-        Ok(())
+        Ok(()) /* ~ changed by cargo-mutants ~ */
     }
 }
 
 // These methods are public to other contracts
 // Note: modifying storage will become much prettier soon
 #[public]
 impl<T: Erc20Params> Erc20<T> {
     /// Immutable token name
