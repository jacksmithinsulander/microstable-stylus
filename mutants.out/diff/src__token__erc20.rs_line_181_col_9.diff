--- src/token/erc20.rs
+++ replace Erc20<T>::transfer_from -> Result<bool, Erc20Error> with Ok(true)
@@ -173,36 +173,17 @@
     /// (msg::sender() must be able to spend at least `value` tokens from `from`)
     pub fn transfer_from(
         &mut self,
         from: Address,
         to: Address,
         value: U256,
     ) -> Result<bool, Erc20Error> {
         // Check msg::sender() allowance
-        let sender = self.vm().msg_sender();
-        let mut sender_allowances = self.allowances.setter(from);
-        let mut allowance = sender_allowances.setter(sender);
-        let old_allowance = allowance.get();
-        if old_allowance < value {
-            return Err(Erc20Error::InsufficientAllowance(InsufficientAllowance {
-                owner: from,
-                spender: self.vm().msg_sender(),
-                have: old_allowance,
-                want: value,
-            }));
-        }
-
-        // Decreases allowance
-        allowance.set(old_allowance - value);
-
-        // Calls the internal transfer function
-        self._transfer(from, to, value)?;
-
-        Ok(true)
+        Ok(true) /* ~ changed by cargo-mutants ~ */
     }
 
     /// Approves the spenditure of `value` tokens of msg::sender() to `spender`
     pub fn approve(&mut self, spender: Address, value: U256) -> bool {
         self.allowances.setter(self.vm().msg_sender()).insert(spender, value);
         log(self.vm(), Approval {
             owner: self.vm().msg_sender(),
             spender,
