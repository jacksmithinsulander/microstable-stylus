--- src/contracts/manager.rs
+++ replace Manager::liquidate -> Result<(), Vec<u8>> with Ok(())
@@ -125,38 +125,17 @@
                     Ok(())
                 }
             },
             Err(e) => return Err(e) 
         }
     }
 
     pub fn liquidate(&mut self, user: Address) -> Result<(), Vec<u8>> {
-        match self.collat_ratio(user) {
-            Ok(result) => {
-                if result > U256::from(MIN_COLLAT_RATIO) {
-                    return Err(b"Not Undercollateralized".to_vec());
-                } else {
-                    let weth_instance = IErc20::new(self.weth.get());
-                    let sh_usd_instance = IErc20::new(self.sh_usd.get());
-                    let sender = self.vm().msg_sender();
-                    let amount_deposited = self.address_2deposit.get(user);
-                    match sh_usd_instance.burn(&mut *self, sender, amount_deposited) {
-                        Ok(_) => {
-                            let _ = weth_instance.transfer(&mut *self, sender, amount_deposited);
-                            self.address_2deposit.insert(user, U256::ZERO);
-                            self.address_2minted.insert(user, U256::ZERO);
-                            Ok(())
-                        },
-                        Err(e) => return Err(e.into())
-                    }
-                }
-            },
-            Err(e) => return Err(e) 
-        }
+        Ok(()) /* ~ changed by cargo-mutants ~ */
     }
 
     pub fn collat_ratio(&self, user: Address) -> Result<U256, Vec<u8>> {
         let minted = self.address_2minted.get(user);
         if minted.is_zero() {
             return Ok(U256::MAX);
         }
         let deposited = self.address_2deposit.get(user);
