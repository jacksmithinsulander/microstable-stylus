--- src/token/erc20.rs
+++ replace Erc20<T>::_transfer -> Result<(), Erc20Error> with Ok(())
@@ -60,35 +60,17 @@
 // These methods aren't exposed to other contracts
 // Methods marked as "pub" here are usable outside of the erc20 module (i.e. they're callable from lib.rs)
 // Note: modifying storage will become much prettier soon
 impl<T: Erc20Params> Erc20<T> {
     /// Movement of funds between 2 accounts
     /// (invoked by the public transfer() and transfer_from() functions )
     pub fn _transfer(&mut self, from: Address, to: Address, value: U256) -> Result<(), Erc20Error> {
         // Decreasing sender balance
-        let mut sender_balance = self.balances.setter(from);
-        let old_sender_balance = sender_balance.get();
-        if old_sender_balance < value {
-            return Err(Erc20Error::InsufficientBalance(InsufficientBalance {
-                from,
-                have: old_sender_balance,
-                want: value,
-            }));
-        }
-        sender_balance.set(old_sender_balance - value);
-
-        // Increasing receiver balance
-        let mut to_balance = self.balances.setter(to);
-        let new_to_balance = to_balance.get() + value;
-        to_balance.set(new_to_balance);
-
-        // Emitting the transfer event
-        log(self.vm(), Transfer { from, to, value });
-        Ok(())
+        Ok(()) /* ~ changed by cargo-mutants ~ */
     }
 
     /// Mints `value` tokens to `address`
     pub fn mint(&mut self, address: Address, value: U256) -> Result<(), Erc20Error> {
         // Increasing balance
         let mut balance = self.balances.setter(address);
         let new_balance = balance.get() + value;
         balance.set(new_balance);
